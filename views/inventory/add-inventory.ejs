<%- include('../partials/head', {title: title}) %>

<body>
  <div id="wrapper">
    <main>
      <div class="hero">
        <div class="hero-content">
          <h1>Add New Vehicle</h1>
          <p>Add a new vehicle to your inventory</p>
        </div>
      </div>
      
      <!-- Flash Messages -->
      <% if (messages.notice) { %>
        <div class="notice">
          <p><%= messages.notice %></p>
        </div>
      <% } %>
      
      <% if (messages.errors) { %>
        <div class="errors">
          <% messages.errors.forEach(error => { %>
            <p><%= error.msg %></p>
          <% }) %>
        </div>
      <% } %>

      <div class="form-container">
        <form action="/inv/add-inventory" method="post" class="add-inventory-form">
          <div class="form-row">
            <div class="form-group">
              <label for="inv_make">Make</label>
              <input 
                type="text" 
                id="inv_make" 
                name="inv_make" 
                value="<%= typeof inv_make !== 'undefined' ? inv_make : '' %>"
                required
                maxlength="30"
              >
            </div>
            
            <div class="form-group">
              <label for="inv_model">Model</label>
              <input 
                type="text" 
                id="inv_model" 
                name="inv_model" 
                value="<%= typeof inv_model !== 'undefined' ? inv_model : '' %>"
                required
                maxlength="30"
              >
            </div>
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label for="inv_year">Year</label>
              <input 
                type="number" 
                id="inv_year" 
                name="inv_year" 
                value="<%= typeof inv_year !== 'undefined' ? inv_year : '' %>"
                required
                min="1900"
                max="<%= new Date().getFullYear() + 1 %>"
              >
            </div>
            
            <div class="form-group">
              <label for="inv_price">Price</label>
              <input 
                type="number" 
                id="inv_price" 
                name="inv_price" 
                value="<%= typeof inv_price !== 'undefined' ? inv_price : '' %>"
                required
                min="0"
                step="0.01"
              >
            </div>
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label for="inv_miles">Miles</label>
              <input 
                type="number" 
                id="inv_miles" 
                name="inv_miles" 
                value="<%= typeof inv_miles !== 'undefined' ? inv_miles : '' %>"
                required
                min="0"
              >
            </div>
            
            <div class="form-group">
              <label for="inv_color">Color</label>
              <input 
                type="text" 
                id="inv_color" 
                name="inv_color" 
                value="<%= typeof inv_color !== 'undefined' ? inv_color : '' %>"
                required
                maxlength="20"
              >
            </div>
          </div>
          
          <div class="form-group">
            <label for="classification_id">Classification</label>
            <%- classificationList %>
          </div>
          
          <div class="form-group">
            <label for="inv_description">Description</label>
            <textarea 
              id="inv_description" 
              name="inv_description" 
              required
              rows="4"
            ><%= typeof inv_description !== 'undefined' ? inv_description : '' %></textarea>
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label for="inv_image">Image Path</label>
              <input 
                type="text" 
                id="inv_image" 
                name="inv_image" 
                value="<%= typeof inv_image !== 'undefined' ? inv_image : '/images/vehicles/no-image.jpg' %>"
                required
                maxlength="50"
              >
            </div>
            
            <div class="form-group">
              <label for="inv_thumbnail">Thumbnail Path</label>
              <input 
                type="text" 
                id="inv_thumbnail" 
                name="inv_thumbnail" 
                value="<%= typeof inv_thumbnail !== 'undefined' ? inv_thumbnail : '/images/vehicles/no-image-tn.png' %>"
                required
                maxlength="50"
              >
            </div>
          </div>
          
          <div class="form-actions">
            <button type="submit" class="btn btn-primary">Add Vehicle</button>
            <a href="/inv/" class="btn btn-secondary">Cancel</a>
          </div>
        </form>
      </div>
    </main>
  </div>

  <script>
    // Enhanced client-side validation
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.querySelector('.add-inventory-form');
      const inputs = {
        make: document.getElementById('inv_make'),
        model: document.getElementById('inv_model'),
        year: document.getElementById('inv_year'),
        price: document.getElementById('inv_price'),
        miles: document.getElementById('inv_miles'),
        color: document.getElementById('inv_color'),
        description: document.getElementById('inv_description'),
        image: document.getElementById('inv_image'),
        thumbnail: document.getElementById('inv_thumbnail')
      };
      
      // Real-time validation for text inputs
      [inputs.make, inputs.model, inputs.color].forEach(input => {
        input.addEventListener('input', function() {
          const value = this.value.trim();
          if (value.length > 0 && value.length > 30) {
            this.setCustomValidity('Field must be 30 characters or less');
            this.style.borderColor = '#e74c3c';
          } else {
            this.setCustomValidity('');
            this.style.borderColor = '#27ae60';
          }
        });
      });
      
      // Real-time validation for year
      inputs.year.addEventListener('input', function() {
        const year = parseInt(this.value);
        const currentYear = new Date().getFullYear();
        if (year < 1900 || year > currentYear + 1) {
          this.setCustomValidity(`Year must be between 1900 and ${currentYear + 1}`);
          this.style.borderColor = '#e74c3c';
        } else {
          this.setCustomValidity('');
          this.style.borderColor = '#27ae60';
        }
      });
      
      // Real-time validation for price
      inputs.price.addEventListener('input', function() {
        const price = parseFloat(this.value);
        if (price < 0) {
          this.setCustomValidity('Price must be a positive number');
          this.style.borderColor = '#e74c3c';
        } else {
          this.setCustomValidity('');
          this.style.borderColor = '#27ae60';
        }
      });
      
      // Real-time validation for miles
      inputs.miles.addEventListener('input', function() {
        const miles = parseInt(this.value);
        if (miles < 0) {
          this.setCustomValidity('Miles must be a positive number');
          this.style.borderColor = '#e74c3c';
        } else {
          this.setCustomValidity('');
          this.style.borderColor = '#27ae60';
        }
      });
      
      // Form submission validation
      form.addEventListener('submit', function(e) {
        let isValid = true;
        const errors = [];
        
        // Validate required fields
        Object.keys(inputs).forEach(key => {
          const input = inputs[key];
          if (input.hasAttribute('required') && !input.value.trim()) {
            errors.push(`${input.previousElementSibling.textContent} is required`);
            isValid = false;
          }
        });
        
        // Validate year range
        const year = parseInt(inputs.year.value);
        const currentYear = new Date().getFullYear();
        if (year < 1900 || year > currentYear + 1) {
          errors.push(`Year must be between 1900 and ${currentYear + 1}`);
          isValid = false;
        }
        
        // Validate price
        const price = parseFloat(inputs.price.value);
        if (price < 0) {
          errors.push('Price must be a positive number');
          isValid = false;
        }
        
        // Validate miles
        const miles = parseInt(inputs.miles.value);
        if (miles < 0) {
          errors.push('Miles must be a positive number');
          isValid = false;
        }
        
        if (!isValid) {
          e.preventDefault();
          alert('Please fix the following errors:\n\n' + errors.join('\n'));
          return false;
        }
      });
    });
  </script>
</body>
</html>
